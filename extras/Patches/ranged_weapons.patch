Index: arcemu-world/Player.cpp
===================================================================
--- arcemu-world/Player.cpp	(revision 421)
+++ arcemu-world/Player.cpp	(working copy)
@@ -205,6 +205,9 @@
 	m_lockTransportVariables= false;
 
 	// Autoshot variables
+	m_AutoShotStartX		= 0;
+	m_AutoShotStartY		= 0;
+	m_AutoShotStartZ		= 0;
 	m_AutoShotTarget		= 0;
 	m_onAutoShot			= false;
 	m_AutoShotDuration		= 0;
@@ -5636,6 +5639,14 @@
 	if( iprot && getLevel()< iprot->RequiredLevel)
 		return SPELL_FAILED_LOWLEVEL;
 
+	// Check if we have moved
+	if(this->m_AutoShotStartX != GetPositionX() ||
+		this->m_AutoShotStartY != GetPositionY() ||
+		this->m_AutoShotStartZ != GetPositionZ())
+	{
+		return SPELL_FAILED_INTERRUPTED;
+	}
+
 	// Player has clicked off target. Fail spell.
 	if( m_curSelection != m_AutoShotTarget )
 		return SPELL_FAILED_INTERRUPTED;
@@ -5766,10 +5777,6 @@
 			m_AutoShotAttackTimer = 0; 
 			m_onAutoShot=false;
 		}
-		else if( m_isMoving )
-		{
-			m_AutoShotAttackTimer = 100;
-		}
 		else
 		{
 			m_AutoShotAttackTimer = m_AutoShotDuration;//avoid flooding client with error mesages
Index: arcemu-world/Player.h
===================================================================
--- arcemu-world/Player.h	(revision 421)
+++ arcemu-world/Player.h	(working copy)
@@ -1344,6 +1344,9 @@
 	uint32 m_AutoShotAttackTimer;
 	bool m_onAutoShot;
 	uint64 m_AutoShotTarget;
+	float m_AutoShotStartX;
+	float m_AutoShotStartY;
+	float m_AutoShotStartZ;
 	SpellEntry *m_AutoShotSpell;
 	void _InitialReputation();
 	void EventActivateGameObject(GameObject* obj);
Index: arcemu-world/SpellHandler.cpp
===================================================================
--- arcemu-world/SpellHandler.cpp	(revision 421)
+++ arcemu-world/SpellHandler.cpp	(working copy)
@@ -248,6 +248,9 @@
 			
 			if(!_player->m_onAutoShot)
 			{
+				_player->m_AutoShotStartX = _player->GetPositionX();
+				_player->m_AutoShotStartY = _player->GetPositionY();
+				_player->m_AutoShotStartZ = _player->GetPositionZ();
 				_player->m_AutoShotTarget = _player->GetSelection();
 				uint32 duration = _player->GetUInt32Value(UNIT_FIELD_RANGEDATTACKTIME);
 				SpellCastTargets targets(recvPacket,GetPlayer()->GetGUID());
